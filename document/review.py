# -*- coding: utf-8 -*-
"""
@name:        
@function：   
@step:        
@author: Bruce
@contact: zhu.chaoqiang@byd.com
@Created on: 2019/10/22 10:24

"""
# 问题一：如何查看三方文档的功能？
# 1、官方文档
# 2、查看源码、可以到对应的虚拟环境、库安装的目录下进行源码查看、也可以在解释器部分查看

# 问题二：Django提供了哪些组件？


# 问题三：为什么要重载（重写）父类方法
#        ——父类的方法不适合子类的场景、子类需要对其进行个性化的改造


# 问题四：处理数据与样式的分开
# 后端：主要工作室处理数据
# 前端：主要工作室处理样式
# 当一个人开发的时候，要把处理数据过程与展示过程分开、并且先处理数据过程

# 问题五：在模板HTML中也可以配置跳转路由、并且可以实现GET方法拼接字符串传参、POST方法form表单传参

# 问题六：可以通过模板反向url解析、和reverse()反向解析实现解耦

# 问题七：源码手动安装Python库
# 比如：手动安装requests
#
# 先下载requests包 https://github.com/kennethreitz/requests
# 解压下载的zip包
# 进入有setup.py 的目录 ，用windows的cmd
# 先执行 python setup.py build
# 然后执行 python setup.py install
# 如果不出什么问题，提示安装成功
# 新建立一个测试项目，import requests 

# 问题八：分页

# 实现分页的原因;
# 提升用户体验
# 减轻服务器的性能损耗

# 实现分页的原理及方法


# 问题九：有了print为什么还要logging模块
# print 方法的问题在于只能用于开发阶段，上线之后代码里应该不允许存在print 的调试
# 代码。因此，如果我们想要在线上收集一些数据的话，可以使用logging可模块。
# 从使用上来说，logging 的用法跟print 一样，唯一的差别就是，logging可以选择输出
# 到文件中还是输出到控制台上。另外，最重要的是，logging 可以始终保留在代码中，通过调
# 整log 的级别来决定是否打印到文件或者控制台上甚至是Sentry（异常收集系统）上。

# 问题十：ORM的高级查询
# 参考链接：https://www.cnblogs.com/liwenzhou/p/8660826.html
# Django 提供两种方法使用原始SQL进行查询：一种是使用raw()方法，进行原始SQL查询并返回模型实例；
# 另一种是完全避开模型层，直接执行自定义的SQL语句。

# 在上面所有的例子中，我们构造的过滤器都只是将字段值与某个常量做比较。如果我们要对两个字段的值做比较，那该怎
# 么做呢？Django 提供 F() 来做这样的比较。F() 的实例可以在查询中引用字段，来比较同一个 model 实例中两个不同
# 字段的值。
# filter() 等方法中的关键字参数查询都是一起进行“AND” 的。 如果你需要执行更复杂的查询（例如OR语句），
# 你可以使用Q对象。

